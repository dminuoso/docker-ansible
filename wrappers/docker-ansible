#!/usr/bin/env sh

# This wrapper will:
#
# 1. Detect if `playbook`, or `vault` is first parameter and adjust to run
#    `ansible-playbook` or `ansible-vault` respectively.
# 2. Mount current user `known_hosts` inside the container.
# 3. If `PKEY` variable is defined, mount as default SSH key.
#
# It will also mount the parent directory as `/data`, allowing you to use
# content from your local system.
#
# Is recommended you place this script in `bin` directory of your project,
# which then will find the relative parent directory from it.
#
# Examples:
#
#   # Provide a private key
#   $ PKEY=~/my-key.pem bin/ansible playbook -i hosts.ini playbook.yml
#
#   # Ask for vault password
#   $ PKEY=... bin/ansible playbook -i hosts.ini deploy.yml --ask-vault-pass
#
#   # Encrypt string for vault
#   $ bin/ansible vault encrypt_string <value> --ask-vault-pass
#

### START: configurable options

# Ansible version, default to latest, override using `ANSIBLE_VERSION` in
# the command line
DEFAULT_VERSION=latest

# Docker image to use, default to mini/ansible
ANSIBLE_IMAGE=mini/ansible

### END: configurable options

################## https://github.com/mkropat/sh-realpath #####################
# The MIT License (MIT)
#
# Copyright (c) 2014 Michael Kropat
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

realpath() {
    canonicalize_path "$(resolve_symlinks "$1")"
}

resolve_symlinks() {
    _resolve_symlinks "$1"
}

_resolve_symlinks() {
    _assert_no_path_cycles "$@" || return

    local dir_context path
    path=$(readlink -- "$1")
    if [ $? -eq 0 ]; then
        dir_context=$(dirname -- "$1")
        _resolve_symlinks "$(_prepend_dir_context_if_necessary "$dir_context" "$path")" "$@"
    else
        printf '%s\n' "$1"
    fi
}

_prepend_dir_context_if_necessary() {
    if [ "$1" = . ]; then
        printf '%s\n' "$2"
    else
        _prepend_path_if_relative "$1" "$2"
    fi
}

_prepend_path_if_relative() {
    case "$2" in
        /* ) printf '%s\n' "$2" ;;
         * ) printf '%s\n' "$1/$2" ;;
    esac
}

_assert_no_path_cycles() {
    local target path

    target=$1
    shift

    for path in "$@"; do
        if [ "$path" = "$target" ]; then
            return 1
        fi
    done
}

canonicalize_path() {
    if [ -d "$1" ]; then
        _canonicalize_dir_path "$1"
    else
        _canonicalize_file_path "$1"
    fi
}

_canonicalize_dir_path() {
    (cd "$1" 2>/dev/null && pwd -P)
}

_canonicalize_file_path() {
    local dir file
    dir=$(dirname -- "$1")
    file=$(basename -- "$1")
    (cd "$dir" 2>/dev/null && printf '%s/%s\n' "$(pwd -P)" "$file")
}

# Optionally, you may also want to include:

### readlink emulation ###

readlink() {
    if _has_command readlink; then
        _system_readlink "$@"
    else
        _emulated_readlink "$@"
    fi
}

_has_command() {
    hash -- "$1" 2>/dev/null
}

_system_readlink() {
    command readlink "$@"
}

_emulated_readlink() {
    if [ "$1" = -- ]; then
        shift
    fi

    _gnu_stat_readlink "$@" || _bsd_stat_readlink "$@"
}

_gnu_stat_readlink() {
    local output
    output=$(stat -c %N -- "$1" 2>/dev/null) &&

    printf '%s\n' "$output" |
        sed "s/^‘[^’]*’ -> ‘\(.*\)’/\1/
             s/^'[^']*' -> '\(.*\)'/\1/"
    # FIXME: handle newlines
}

_bsd_stat_readlink() {
    stat -f %Y -- "$1" 2>/dev/null
}

###############################################################################

SCRIPT_PATH=$(realpath "$0")
SCRIPT_DIR=$(dirname $SCRIPT_PATH)
SCRIPT_PARENT=$(dirname $SCRIPT_DIR)

# detect ansible version or use default
ANSIBLE_VERSION=${ANSIBLE_VERSION:-$DEFAULT_VERSION}

# detect if play, playbook or vault is requested
case $1 in
    play|playbook)
        CMD="ansible-playbook"
        shift
        ;;
    vault)
        CMD="ansible-vault"
        shift
        ;;
    *)
        CMD="ansible"
        ;;
esac

# mount `known_hosts` if present
if [ -f ~/.ssh/known_hosts ]; then
    _known_host_path=$(realpath ~/.ssh/known_hosts)
    MOUNT_OPTS="-v ${_known_host_path}:/etc/ssh/ssh_known_hosts:ro $MOUNT_OPTS"
fi

# detect if `PKEY` was defined
if ! [ -z "$PKEY" ]; then
    _pkey_path=$(realpath $PKEY)
    MOUNT_OPTS="-v ${_pkey_path}:/root/.ssh/id_rsa:ro $MOUNT_OPTS"
fi

# always mount project directory first, to avoid overrides
MOUNT_OPTS="-v $SCRIPT_PARENT:/data $MOUNT_OPTS"

exec docker run -it --rm $MOUNT_OPTS mini/ansible:$ANSIBLE_VERSION $CMD "$@"
